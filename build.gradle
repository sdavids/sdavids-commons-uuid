/*
 * Copyright (c) 2017-2018, Sebastian Davids
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.spotbugs.SpotBugsTask
import de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis
import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id 'com.gradle.build-scan' version '1.16'
  id 'java-library'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'net.nemerosa.versioning' version '2.7.1'
  id 'com.diffplug.gradle.spotless' version '3.15.0'
  id 'net.ltgt.errorprone' version '0.6'
  id 'de.thetaphi.forbiddenapis' version '2.6'
  id 'com.github.spotbugs' version '1.6.4'
  id 'ru.vyarus.animalsniffer' version '1.4.6'
  id 'com.jfrog.bintray' version '1.8.4'
}

ext {
  rootPackageName = 'io.sdavids.commons.uuid'

  errorproneVersion = '2.3.1'
  errorproneJavacVersion = '9+181-r4173-1'
  checkstyleVersion = '8.12'
  pmdVersion = '6.7.0'
  spotbugsVersion = '3.1.7'
  findsecbugsVersion = '1.8.0'
  java8SignatureVersion = '1.0'
  jacocoVersion = '0.8.2'
  apiguardianVersion = '1.0.0'
  jsr305Version = '3.0.2'
  junitVersion = '5.3.1'
  assertjVersion = '3.11.1'
  assertjGuavaVersion = '3.1.0'
  sdavidsCommonsTestVersion = '2.0.0'

  vendor = 'Sebastian Davids'
  inceptionYear = '2017'

  javadocLinks = [
      'https://docs.oracle.com/javase/8/docs/api/',
      'https://apiguardian-team.github.io/apiguardian/docs/1.0.0/api/'
  ] as String[]
}

group 'io.sdavids.commons'
version = '2.1.0'
description = 'Utility methods and classes for using UUIDs.'

repositories.jcenter()

dependencies {
  signature "org.codehaus.mojo.signature:java18:${java8SignatureVersion}@signature"
  errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
  errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
  checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
  pmd "net.sourceforge.pmd:pmd-core:${pmdVersion}"
  pmd "net.sourceforge.pmd:pmd-java:${pmdVersion}"
  spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugsVersion}"

  api "org.apiguardian:apiguardian-api:${apiguardianVersion}"

  compileOnly "com.google.code.findbugs:jsr305:${jsr305Version}"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
  testImplementation "org.assertj:assertj-core:${assertjVersion}"
  testImplementation "io.sdavids.commons.test:sdavids-commons-test:${sdavidsCommonsTestVersion}"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile).configureEach {
  options.fork = true
  options.encoding = 'UTF-8'
  options.debugOptions.debugLevel = 'source,lines,vars'
  options.deprecation = true
  options.compilerArgs += ['-parameters', '-Xlint:all,-processing,-path', '-Werror']
  options.errorprone {
    disableWarningsInGeneratedCode = true
    allDisabledChecksAsWarnings = true
    check('BooleanParameter', CheckSeverity.OFF)
    check('ReturnMissingNullable', CheckSeverity.OFF)
    check('StaticOrDefaultInterfaceMethod', CheckSeverity.OFF)
    check('Var', CheckSeverity.OFF)
  }
}

tasks.named('jar').configure {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
  dirMode = 0775
  fileMode = 0664
  manifest {
    attributes(
        'Build-Revision': versioning.info.commit,
        'Specification-Title': project.name,
        'Specification-Version': project.version,
        'Specification-Vendor': project.ext.vendor,
        'Implementation-Title': project.name,
        'Implementation-Version': "${project.version}-${versioning.info.build}",
        'Implementation-Vendor': project.ext.vendor,
        'Automatic-Module-Name': project.ext.rootPackageName
    )
  }
  from("${project.projectDir}") {
    include 'NOTICE'
    include 'LICENSE'
    into 'META-INF'
  }
  exclude('rebel.xml')
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  systemProperty 'user.timezone', System.properties['user.timezone']
  systemProperty 'user.language', System.properties['user.language']
  systemProperty 'user.country', System.properties['user.country']
  systemProperty 'java.awt.headless', 'true'

  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

  failFast = true

  reports.junitXml.enabled = false
  reports.html.enabled = project.hasProperty('createReports')

  testLogging {
    exceptionFormat = 'full'
  }
}

spotless {
  java {
    googleJavaFormat '1.6'
    licenseHeaderFile 'gradle/conf/spotless-license-java.txt'
  }
  groovyGradle {
    target 'build.gradle', 'settings.gradle'
  }
  format 'misc', {
    target '.gitattributes', '.gitignore',
        'README.adoc',
        'release.sh',
        'CODING_STYLE.txt',
        'AUTHORS', 'CONTRIBUTORS', 'LICENSE', 'NOTICE', 'TODO'
    trimTrailingWhitespace()
    endWithNewline()
  }
  format 'properties', {
    target 'gradle.properties', 'src/**/*.properties'
    encoding 'ISO-8859-1'
    trimTrailingWhitespace()
    endWithNewline()
  }
  format 'yaml', {
    target '.travis.yml'
    indentWithSpaces 2
    trimTrailingWhitespace()
    endWithNewline()
  }
  format 'xml', {
    target 'gradle/conf/**/*.xml'
    indentWithSpaces 2
    trimTrailingWhitespace()
    endWithNewline()
  }
}

tasks.named('javadoc').configure {
  options.locale = 'en_US'
  options.encoding = 'UTF-8'
  options.memberLevel = 'PROTECTED'
  options.header = "${project.name} ${project.version}"
  options.docTitle = "${project.name} API"
  options.links = project.ext.javadocLinks
  options.noTimestamp = true
  options.addBooleanOption('Xdoclint:all', true)
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
  enabled = false
}

if (project.hasProperty('createReports')) {
  tasks.named('javadoc').configure {
    enabled = true
  }
}

animalsniffer {
  cache.enabled = true
}

tasks.withType(CheckForbiddenApis).configureEach {
  bundledSignatures = [
      'jdk-unsafe',
      'jdk-deprecated',
      'jdk-non-portable',
      'jdk-system-out',
      'jdk-reflection'
  ]
}

tasks.withType(Checkstyle).configureEach {
  configFile = project.file('gradle/conf/checkstyle.xml')
  configDir = project.provider({ project.file('gradle/conf') })
  maxWarnings = 0
  reports {
    xml.enabled false
    html.enabled project.hasProperty('createReports')
  }
}

tasks.withType(Pmd).configureEach {
  ruleSets = []
  ruleSetFiles = project.files('gradle/conf/pmd.xml')
  reports {
    xml.enabled false
    html.enabled project.hasProperty('createReports')
  }
}

spotbugs {
  toolVersion = "${spotbugsVersion}"
  excludeFilter = project.file('gradle/conf/spotbugs-exclude-filter.xml')
}

tasks.withType(SpotBugsTask).configureEach {
  effort = 'max'
  reports {
    xml.enabled false
    html.enabled project.hasProperty('createReports')
  }
}

jacoco {
  toolVersion = "${jacocoVersion}"
}

if (project.hasProperty('createReports')) {

  jacocoTestReport {
    reports {
      xml.enabled false
      html.enabled project.hasProperty('createReports')
      html.destination project.file("${project.buildDir}/reports/jacoco")
    }
  }

  jacocoTestReport.dependsOn test
  check.dependsOn jacocoTestReport
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

wrapper {
  gradleVersion = '4.10.2'
}

if (project.hasProperty('release')) {

  apply plugin: 'signing'
  apply plugin: 'maven-publish'

  tasks.named('javadoc').configure {
    enabled = true
  }

  task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    dirMode = 0775
    fileMode = 0664
    manifest {
      attributes(
          'Build-Revision': versioning.info.commit,
          'Specification-Title': project.name,
          'Specification-Version': project.version,
          'Specification-Vendor': project.ext.vendor,
          'Implementation-Title': project.name,
          'Implementation-Version': "${project.version}-${versioning.info.build}",
          'Implementation-Vendor': project.ext.vendor
      )
    }
    from javadoc.destinationDir
  }

  task sourcesJar(type: Jar, dependsOn: 'classes') {
    classifier = 'sources'
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    dirMode = 0775
    fileMode = 0664
    manifest {
      attributes(
          'Build-Revision': versioning.info.commit,
          'Specification-Title': project.name,
          'Specification-Version': project.version,
          'Specification-Vendor': project.ext.vendor,
          'Implementation-Title': project.name,
          'Implementation-Version': "${project.version}-${versioning.info.build}",
          'Implementation-Vendor': project.ext.vendor
      )
    }
    from sourceSets.main.allSource exclude 'rebel.xml'
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
        // TODO: use "${project.name}"
        pom {
          name = project.name
          description = project.description
          url = 'https://github.com/sdavids/sdavids-commons-uuid'
          inceptionYear = project.ext.inceptionYear
          licenses {
            license {
              name = 'Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution = 'repo'
            }
          }
          developers {
            developer {
              id = 'sdavids'
              name = 'Sebastian Davids'
              email = 'sdavids@gmx.de'
              timezone = 'Europe/Berlin'
            }
          }
          scm {
            url = 'https://github.com/sdavids/sdavids-commons-uuid'
            connection = 'scm:git:https://github.com/sdavids/sdavids-commons-uuid.git'
            developerConnection = 'scm:git:https://github.com/sdavids/sdavids-commons-uuid.git'
          }
          issueManagement {
            system = 'GitHub'
            url = 'https://github.com/sdavids/sdavids-commons-uuid/issues'
          }
        }
        //
      }
    }
  }

  signing {
    sign publishing.publications.mavenJava
  }

  bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    // TODO: https://github.com/bintray/gradle-bintray-plugin/issues/255
    filesSpec {
      from("${project.buildDir}/libs") {
        include '*.jar.asc'
      }
      from("${project.buildDir}/publications/mavenJava") {
        include 'pom-default.xml.asc'
        rename 'pom-default.xml.asc', "${project.name}-${project.version}.pom.asc"
      }
      into "${project.group.replaceAll(/\./, '/')}/${project.name}/${project.version}"
    }
    //
    pkg {
      repo = 'sdavids'
      name = project.name
      licenses = ['Apache-2.0']
      websiteUrl = "https://github.com/sdavids/${project.name}"
      issueTrackerUrl = "https://github.com/sdavids/${project.name}/issues"
      vcsUrl = "https://github.com/sdavids/${project.name}.git"
      githubRepo = "sdavids/${project.name}"
      publicDownloadNumbers = true
      version {
        name = "${project.version}"
        vcsTag = "v${project.version}"
      }
    }
  }
}
